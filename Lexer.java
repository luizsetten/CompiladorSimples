/* The following code was generated by JFlex 1.3.5 on 21/11/2019 15:12 */

/*
  This example comes from a short article series in the Linux 
  Gazette by Richard A. Sevenich and Christopher Lopes, titled
  "Compiler Construction Tools". The article series starts at

  http://www.linuxgazette.com/issue39/sevenich.html

  Small changes and updates to newest JFlex+Cup versions 
  by Gerwin Klein
*/

/*
  Commented By: Christopher Lopes
  File Name: lcalc.flex
  To Create: > jflex lcalc.flex

  and then after the parser is created
  > javac Lexer.java
*/
   
/* --------------------------Usercode Section------------------------ */
   
import java_cup.runtime.*;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 21/11/2019 15:12 from the specification file
 * <tt>file:/home/victor/Documentos/CompiladorSimples/lcalc.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2,  0,  3,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0,  0,  0,  0,  0,  0,  0, 13, 14,  9, 11,  0, 12,  6,  8, 
     4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  0, 10, 17, 18, 19,  0, 
     0,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 15,  0, 16,  0,  7, 
     0, 25,  7, 22, 36, 20, 33, 30,  7, 27,  7,  7, 26, 31, 32, 29, 
    28, 37, 23, 21, 34, 35, 24,  7,  7,  7,  7,  0,  0,  0,  0,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    38,    76,    38,   114,   152,   190,   228,    38,    38, 
       38,    38,    38,    38,    38,    38,   266,    38,    38,   304, 
      342,   380,   418,   456,   494,   532,   570,   608,   646,   684, 
      114,   722,   760,   798,    38,   836,   874,   912,   950,   988, 
     1026,  1064,  1102,  1140,   190,  1178,  1216,  1254,  1292,  1330, 
      190,  1368,  1406,  1444,  1482,  1520,  1558,   190,  1596,  1634, 
     1672,  1710,  1748,  1786,   190,  1824,  1862,  1900,  1938,  1976, 
     2014,  2052,  2090,  2128,  2166,   190,  2204,  2242,  2280,  2318, 
      190,   190,  2356,  2394,  2432,  2470,  2508,  2546,   190,  2584, 
      190,  2622,  2660,  2698,  2736,   190,  2774,  2812,   190,  2850, 
     2888,  2926,  2964,  3002,   190,  3040,  3078,  3116,  3154,  3192, 
     3230,   190,  3268,   190,   190,  3306,  3344,  3382,   190,  3420, 
     3458,   190,   190,  3496,  3534,  3572,  3610,   190,  3648,  3686, 
      190,  3724,  3762,   190,  3800,   190
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\2\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\7\1\26\1\7"+
    "\1\27\1\30\1\31\1\32\1\33\2\7\1\34\1\35"+
    "\2\7\1\36\1\7\50\0\1\4\47\0\2\37\1\40"+
    "\43\0\2\6\1\40\43\0\2\7\1\0\1\7\14\0"+
    "\22\7\10\0\1\41\1\42\50\0\1\43\35\0\2\7"+
    "\1\0\1\7\14\0\1\7\1\44\12\7\1\45\5\7"+
    "\4\0\2\7\1\0\1\7\14\0\1\46\21\7\4\0"+
    "\2\7\1\0\1\7\14\0\1\47\21\7\4\0\2\7"+
    "\1\0\1\7\14\0\16\7\1\50\3\7\4\0\2\7"+
    "\1\0\1\7\14\0\1\51\21\7\4\0\2\7\1\0"+
    "\1\7\14\0\14\7\1\52\5\7\4\0\2\7\1\0"+
    "\1\7\14\0\3\7\1\53\1\7\1\54\14\7\4\0"+
    "\2\7\1\0\1\7\14\0\17\7\1\55\2\7\4\0"+
    "\2\7\1\0\1\7\14\0\5\7\1\56\14\7\4\0"+
    "\2\7\1\0\1\7\14\0\5\7\1\57\1\60\1\61"+
    "\7\7\1\62\2\7\4\0\2\7\1\0\1\7\14\0"+
    "\1\63\21\7\4\0\2\40\40\0\2\41\1\0\43\41"+
    "\11\42\1\64\34\42\4\0\2\7\1\0\1\7\14\0"+
    "\2\7\1\65\17\7\4\0\2\7\1\0\1\7\14\0"+
    "\16\7\1\66\2\7\1\67\4\0\2\7\1\0\1\7"+
    "\14\0\14\7\1\70\5\7\4\0\2\7\1\0\1\7"+
    "\14\0\16\7\1\71\3\7\4\0\2\7\1\0\1\7"+
    "\14\0\1\72\21\7\4\0\2\7\1\0\1\7\14\0"+
    "\7\7\1\73\12\7\4\0\2\7\1\0\1\7\14\0"+
    "\7\7\1\74\6\7\1\75\3\7\4\0\2\7\1\0"+
    "\1\7\14\0\11\7\1\76\10\7\4\0\2\7\1\0"+
    "\1\7\14\0\1\7\1\77\1\7\1\100\16\7\4\0"+
    "\2\7\1\0\1\7\14\0\11\7\1\101\10\7\4\0"+
    "\2\7\1\0\1\7\14\0\2\7\1\102\17\7\4\0"+
    "\2\7\1\0\1\7\14\0\17\7\1\103\2\7\4\0"+
    "\2\7\1\0\1\7\14\0\13\7\1\104\6\7\4\0"+
    "\2\7\1\0\1\7\14\0\14\7\1\105\5\7\10\106"+
    "\1\4\1\64\34\106\4\0\2\7\1\0\1\7\14\0"+
    "\3\7\1\107\16\7\4\0\2\7\1\0\1\7\14\0"+
    "\5\7\1\110\14\7\4\0\2\7\1\0\1\7\14\0"+
    "\17\7\1\111\2\7\4\0\2\7\1\0\1\7\14\0"+
    "\5\7\1\112\14\7\4\0\2\7\1\0\1\7\14\0"+
    "\11\7\1\113\10\7\4\0\2\7\1\0\1\7\14\0"+
    "\5\7\1\114\14\7\4\0\2\7\1\0\1\7\14\0"+
    "\2\7\1\115\17\7\4\0\2\7\1\0\1\7\14\0"+
    "\1\116\21\7\4\0\2\7\1\0\1\7\14\0\12\7"+
    "\1\117\7\7\4\0\2\7\1\0\1\7\14\0\1\7"+
    "\1\120\20\7\4\0\2\7\1\0\1\7\14\0\5\7"+
    "\1\121\14\7\4\0\2\7\1\0\1\7\14\0\5\7"+
    "\1\122\14\7\4\0\2\7\1\0\1\7\14\0\16\7"+
    "\1\123\3\7\4\0\2\7\1\0\1\7\14\0\1\124"+
    "\1\125\6\7\1\126\11\7\4\0\2\7\1\0\1\7"+
    "\14\0\2\7\1\127\17\7\10\106\1\0\1\64\34\106"+
    "\4\0\2\7\1\0\1\7\14\0\1\130\21\7\4\0"+
    "\2\7\1\0\1\7\14\0\11\7\1\131\10\7\4\0"+
    "\2\7\1\0\1\7\14\0\5\7\1\132\14\7\4\0"+
    "\2\7\1\0\1\7\14\0\11\7\1\133\10\7\4\0"+
    "\2\7\1\0\1\7\14\0\3\7\1\134\16\7\4\0"+
    "\2\7\1\0\1\7\14\0\7\7\1\135\12\7\4\0"+
    "\2\7\1\0\1\7\14\0\7\7\1\136\12\7\4\0"+
    "\2\7\1\0\1\7\14\0\3\7\1\137\16\7\4\0"+
    "\2\7\1\0\1\7\14\0\11\7\1\140\10\7\4\0"+
    "\2\7\1\0\1\7\14\0\17\7\1\141\2\7\4\0"+
    "\2\7\1\0\1\7\14\0\14\7\1\142\5\7\4\0"+
    "\2\7\1\0\1\7\14\0\1\143\21\7\4\0\2\7"+
    "\1\0\1\7\14\0\5\7\1\144\14\7\4\0\2\7"+
    "\1\0\1\7\14\0\5\7\1\145\14\7\4\0\2\7"+
    "\1\0\1\7\14\0\4\7\1\146\15\7\4\0\2\7"+
    "\1\0\1\7\14\0\14\7\1\147\5\7\4\0\2\7"+
    "\1\0\1\7\14\0\14\7\1\150\5\7\4\0\2\7"+
    "\1\0\1\7\14\0\11\7\1\151\10\7\4\0\2\7"+
    "\1\0\1\7\14\0\3\7\1\152\16\7\4\0\2\7"+
    "\1\0\1\7\14\0\5\7\1\153\14\7\4\0\2\7"+
    "\1\0\1\7\14\0\5\7\1\154\14\7\4\0\2\7"+
    "\1\0\1\7\14\0\21\7\1\155\4\0\2\7\1\0"+
    "\1\7\14\0\3\7\1\156\16\7\4\0\2\7\1\0"+
    "\1\7\14\0\11\7\1\157\10\7\4\0\2\7\1\0"+
    "\1\7\14\0\5\7\1\160\14\7\4\0\2\7\1\0"+
    "\1\7\14\0\16\7\1\161\3\7\4\0\2\7\1\0"+
    "\1\7\14\0\11\7\1\162\10\7\4\0\2\7\1\0"+
    "\1\7\14\0\11\7\1\163\10\7\4\0\2\7\1\0"+
    "\1\7\14\0\13\7\1\164\6\7\4\0\2\7\1\0"+
    "\1\7\14\0\14\7\1\165\5\7\4\0\2\7\1\0"+
    "\1\7\14\0\17\7\1\166\2\7\4\0\2\7\1\0"+
    "\1\7\14\0\5\7\1\167\14\7\4\0\2\7\1\0"+
    "\1\7\14\0\7\7\1\170\5\7\1\171\4\7\4\0"+
    "\2\7\1\0\1\7\14\0\11\7\1\172\10\7\4\0"+
    "\2\7\1\0\1\7\14\0\5\7\1\173\14\7\4\0"+
    "\2\7\1\0\1\7\14\0\16\7\1\174\3\7\4\0"+
    "\2\7\1\0\1\7\14\0\5\7\1\175\14\7\4\0"+
    "\2\7\1\0\1\7\14\0\14\7\1\176\5\7\4\0"+
    "\2\7\1\0\1\7\14\0\7\7\1\177\12\7\4\0"+
    "\2\7\1\0\1\7\14\0\1\200\21\7\4\0\2\7"+
    "\1\0\1\7\14\0\14\7\1\201\5\7\4\0\2\7"+
    "\1\0\1\7\14\0\7\7\1\202\12\7\4\0\2\7"+
    "\1\0\1\7\14\0\13\7\1\203\6\7\4\0\2\7"+
    "\1\0\1\7\14\0\16\7\1\204\3\7\4\0\2\7"+
    "\1\0\1\7\14\0\2\7\1\205\17\7\4\0\2\7"+
    "\1\0\1\7\14\0\11\7\1\206\10\7\4\0\2\7"+
    "\1\0\1\7\14\0\7\7\1\207\12\7\4\0\2\7"+
    "\1\0\1\7\14\0\11\7\1\210\10\7";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  1,  9,  1,  1,  1,  1,  9,  9,  9,  9,  9,  9,  9,  9, 
     1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1, 
     1,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[3838];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 135: 
          {   return symbol(sym.STARTFUNC); }
        case 137: break;
        case 130: 
          {   return symbol(sym.ENDFUNC);   }
        case 138: break;
        case 127: 
          {   return symbol(sym.DECLFLOAT); }
        case 139: break;
        case 122: 
          {   return symbol(sym.PROGRAM);   }
        case 140: break;
        case 121: 
          {   return symbol(sym.ENQUANTO);  }
        case 141: break;
        case 118: 
          {   return symbol(sym.FIMPARA);   }
        case 142: break;
        case 114: 
          {   return symbol(sym.DECLINT);   }
        case 143: break;
        case 113: 
          {   return symbol(sym.RETORNO);   }
        case 144: break;
        case 111: 
          {   return symbol(sym.WRITELINE); }
        case 145: break;
        case 19: 
          {   return symbol(sym.E);         }
        case 146: break;
        case 18: 
          {   return symbol(sym.GREATER);   }
        case 147: break;
        case 17: 
          {   return symbol(sym.EQUALS);    }
        case 148: break;
        case 16: 
          {   return symbol(sym.LESS);      }
        case 149: break;
        case 15: 
          {   return symbol(sym.RBRCKT);    }
        case 150: break;
        case 14: 
          {   return symbol(sym.LBRCKT);    }
        case 151: break;
        case 13: 
          {   return symbol(sym.RPAREN);    }
        case 152: break;
        case 12: 
          {   return symbol(sym.LPAREN);    }
        case 153: break;
        case 11: 
          {   return symbol(sym.MINUS);     }
        case 154: break;
        case 7: 
          {   return symbol(sym.DIVIDE);    }
        case 155: break;
        case 8: 
          {   return symbol(sym.TIMES);     }
        case 156: break;
        case 9: 
          {   return symbol(sym.SEMI);      }
        case 157: break;
        case 10: 
          {   return symbol(sym.PLUS);      }
        case 158: break;
        case 34: 
          {   return symbol(sym.ATTRIB);    }
        case 159: break;
        case 37: 
          {   return symbol(sym.IFF);       }
        case 160: break;
        case 44: 
          {   return symbol(sym.OU);        }
        case 161: break;
        case 50: 
          {   return symbol(sym.DE);        }
        case 162: break;
        case 57: 
          {   return symbol(sym.ATE);       }
        case 163: break;
        case 67: 
          {   return symbol(sym.ENDPRG);    }
        case 164: break;
        case 75: 
          {   return symbol(sym.READLINE);  }
        case 165: break;
        case 80: 
          {   return symbol(sym.PARA);      }
        case 166: break;
        case 81: 
          {   return symbol(sym.FACA);      }
        case 167: break;
        case 88: 
          {   return symbol(sym.THENN);     }
        case 168: break;
        case 90: 
          {   return symbol(sym.ELSEE);     }
        case 169: break;
        case 95: 
          {   return symbol(sym.PASSO);     }
        case 170: break;
        case 98: 
          {   return symbol(sym.ENDELSE);   }
        case 171: break;
        case 104: 
          {   return symbol(sym.STARTPRG);  }
        case 172: break;
        case 110: 
          {   return symbol(sym.FUNCAO);    }
        case 173: break;
        case 2: 
        case 3: 
          {  /* just skip what was found, do nothing */  }
        case 174: break;
        case 4: 
        case 5: 
          {  /* System.out.print(yytext()); */
                         return symbol(sym.INTT,yytext());  }
        case 175: break;
        case 6: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 35: 
        case 36: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 65: 
        case 66: 
        case 68: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 89: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 96: 
        case 97: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 112: 
        case 115: 
        case 116: 
        case 117: 
        case 119: 
        case 120: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 128: 
        case 129: 
        case 131: 
        case 132: 
        case 134: 
          {  /* System.out.print(yytext()); */
                         return symbol(sym.ID, yytext()); }
        case 176: break;
        case 31: 
          {  /* System.out.print(yytext()); */
                         return symbol(sym.FLOATT, yytext());  }
        case 177: break;
        case 32: 
          {  /* just skip what was found, do nothing */  }
        case 178: break;
        case 133: 
          {   return symbol(sym.FIMENQUANTO); }
        case 179: break;
        case 64: 
          {   return symbol(sym.NAO);        }
        case 180: break;
        case 1: 
          {  throw new Error("Illegal character <"+yytext()+">");  }
        case 181: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
